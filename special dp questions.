problem link :
https://codeforces.com/problemset/problem/711/C

my thoughts :(approch)
3-D dp.
dp[i][j][k] -> i->upto ith index , j->upto ith index what is the beauty , k ->what is the last color is applied.
and it will store the minimum cost to reach this state.

dp[i][j][k] 
if we apply same color as last used color or the current color is same as last color.
if(it is uncolored) dp[i-1][j][k] + cost[i][k] (cost of coloring the ith tree using kth color)
else dp[i-1][j][k] (if it is already coloured).

if current color is different from the last color.
if (it is uncolored) dp[i-1][j-1][l] + cost[i][k]  (l looping through all the colores) l!=k
else dp[i-1][j-1][l] (already have some color.)

solution : 
https://codeforces.com/contest/711/submission/80299643

-------------------------------------------------------------------------------------------------------------

// a very good dp question.
 problem Link:
 https://codeforces.com/contest/1216/problem/F
 
 My thoughts :
 https://codeforces.com/blog/entry/69954?#comment-544848 ( very special comment)
 
 dp[0] will be our answer . 0 indexing .
 for all index we want to find the leftmost rounter place which is in range (k) i.e (x+k <= i)
 // for that part we will use a piece of code that is very tricky .
   /*for(int i = n - 1; i >= -k; i--)
    {
        if(i >= 0 && s[i] == '1')
            cur = i;
        if(i + k < n)
            pos_next[i + k] = cur;
    }
    */ (tricky part)
 and now dp states are bit  easier to think.
 dp[i-1] ->> we don't place router dp[i] + i 
  we have the index to leftmost router place. if we place a router at that place it'a effect will be at left side also;
 effective left side. max(0,leftmost[i-1]-k).
 so we can use push dp concept to update that new place. new place will be updated as .
 dp[i] + leftmost[i-1] + 1
 
 solution link:
 https://codeforces.com/contest/1216/submission/81984770
 -----------------------------------------------------------------------------------------
  
  problem link :
  
  https://codeforces.com/contest/1272/problem/F
  
  My thoughts:
  see 3 state is needed for this dp i,j,k .
  i represent prefix of 1st string (0 to i) till covered
  j represent prefix of 2nd string (o to j) till covered
  and k is the balanced factor till now . if we append open braket we increase the bal factor by 1.
  and appendng of closing bracket will decrease it.
  
  we have 2 options append ( or ).
  
  if we append ( . and this is present at ith position of the string 1 then we will increase i and update next state.
  so for j.
  and finally backtrack the path to get the string.
  
  
  editorial Link:
  
  https://codeforces.com/blog/entry/72132
  
  solution Link:
  https://codeforces.com/contest/1272/submission/82437284
  
  --------------------------------------------------------------------------------------
 
 
 
 
 
 
 
 
 
