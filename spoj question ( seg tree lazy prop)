question link:
https://www.spoj.com/problems/HORRIBLE/

my thoughts:
this question can be solved using BIT and sqrt decomposition.
i solved this problem using segment tree with lazy propagation.



// spoj question horrible
#include <bits/stdc++.h>
using namespace std;
#define ll long long int
 
#define vl vector<ll>
#define vi vector<int>
 
#define ff first
#define ss second
 
#define pb push_back
#define MOD 1000000007
const int nax = 1e6+5;
#define inf 4e18
 
#define display(v) for(int i =0;i<v.size();++i)cout << v[i] << " "
#define all(v) v.begin(),v.end()
ll sqr(ll x){return x*x;}
inline ll add(ll a, ll b){ ll c = a + b; if(c >= MOD) c -= MOD; return c; }
inline ll mul(ll a, ll b){ return (a * 1ll * b) % MOD; }
inline ll sub(ll a, ll b){ ll c = a - b; if(c < 0) c += MOD; return c; }

vl seg;
vl lazy;

void update(ll cur,ll l,ll r,ll p,ll q,ll val){
    if(lazy[cur]){
        seg[cur] += (r-l+1)*lazy[cur]*1LL;
        if(l!=r){
            lazy[2*cur] += lazy[cur]*1LL;
            lazy[2*cur + 1] += lazy[cur]*1LL;
        }
        lazy[cur] = 0;
    }
    if(r<l || l>q || r < p)return ;

    if(p<=l && r<=q){
        seg[cur]  += (r-l+1)*val*1LL;
        if(l!=r){
            lazy[2*cur]  += val;
            lazy[2*cur + 1] += val;
        }
        return ;
    }

    ll m  = (l+r)/2;
    update(2*cur,l,m,p,q,val);
    update(2*cur+1,m+1,r,p,q,val);
    seg[cur] = seg[2*cur] + seg[2*cur + 1];
}

ll qsum(ll cur,ll l,ll r,ll p, ll q){
    if(lazy[cur]){
        seg[cur] += (r-l+1)*lazy[cur]*1LL;
        if(l!=r){
            lazy[2*cur] += lazy[cur]*1LL;
            lazy[2*cur + 1] += lazy[cur]*1LL;
        }
        lazy[cur] = 0;
    } 
    if(r <l || l>q || r<p)return 0LL;

    if(l>=p && r<=q){
        return seg[cur];
    }
    ll m = (l+r)/2;
    ll left = qsum(2*cur,l,m,p,q);
    ll right = qsum(2*cur +1,m+1,r,p,q);
    return left + right;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL); 
    int t; cin>>t;
    while(t--){
        ll n,c;
        cin>>n>>c;
        seg.clear();
        seg.resize(1000000);
        fill(all(seg),0);

        lazy.clear();
        lazy.resize(1000000);
        fill(all(lazy),0);
        while(c--){
            int type;
            cin>>type;
            if(type == 0){
                ll p,q,val;
                cin>>p>>q>>val;
                update(1,1,n,p,q,val);
            }
            else{
                ll p,q;
                cin>>p>>q;
                cout << qsum(1,1,n,p,q) << "\n";
            }
        }
    }

    return 0;
}
    
