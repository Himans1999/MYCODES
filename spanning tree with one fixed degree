problem link: 
https://codeforces.com/contest/1133/problem/F2

related topic :

basic dfs and connected components , coloring ..


// My code .

steps:
1. remove vertex 0 and find all connected components and colour them for convenience.
2. sort the adj list of 0 and include at least on edge to all the components .
3. a simple bfs.

#include <bits/stdc++.h>
using namespace std;
#define ll long long int
#define ul unsigned long long int
#define ld long double
#define f(t) for(ll i =0;i<t;i++)
#define vi vector<int>
#define vl vector<ll>
#define pb push_back
#define ff first
#define ss second
#define MOD 1000000007
#define inf 4e18
#define EPS 1e-3
#define PI 3.1415926535897932385
#define display(v) f(v.size())cout << v[i]<<" "
const double h = 1e-6;
const int MAX_  = 200005;
#define all(v) v.begin(),v.end()

inline ll mul(ll a, ll b){ return (a * 1ll * b) % MOD; }
inline ll sub(ll a, ll b){ ll c = a - b; if(c < 0) c += MOD; return c; }
inline ll add(ll a, ll b){ ll c = a + b; if(c > MOD) c -= MOD; return c; }
ll sqr(ll x)
{
    return x*x;
}
 //////////////////////*********CODE***********/////////////////////
 //////////////////////////////////////////////////////////////////
struct graph{
    vi v;
    int par = -1,col = -1;  // parent and component number
};
graph G[MAX_];
int cnt;  // color count

int n,e;

vector<pair<int,int> > ans;

vector<bool> vis(MAX_,false);

void bfs(int s,int bad){
    vis[s] = 1;
    queue<int> q;
    q.push(s);
    while(!q.empty()){
        int from = q.front();
        q.pop();
        G[from].col = cnt;
        if(G[from].par != -1){
            ans.pb({from,G[from].par});
        }
        for(int i =0;i<G[from].v.size();++i){
            int to = G[from].v[i];
            if(to == bad)continue;
            if(!vis[to]){
                G[to].par = from;
                vis[to] = 1;
                q.push(to);
            }
        }
    }
    ++cnt;
}

bool rule(int a,int b){
    return G[a].col < G[b].col;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int d;
    cin>>n>>e>>d;
    f(e){
        int x,y;
        cin>>x>>y;
        G[x].v.pb(y);
        G[y].v.pb(x);
    }
    cnt = 0;
    for(int i=2;i<=n;++i){
        if(G[i].col == -1){
            bfs(i,1);
        }
    }
    if(cnt > d || d > G[1].v.size()){
        cout << "NO\n";
        return 0;
    }
    sort(all(G[1].v),rule);
    vector<bool> used(G[1].v.size(),false);
    for(int i=0;i<G[1].v.size();++i){
        int to = G[1].v[i];
        int prev = (i==0)?-1:G[1].v[i-1];
        if(i == 0 || G[to].col != G[prev].col){
            ans.pb({1,to});
            used[i] = 1;
        }
    }
    d-=cnt;

    for(int i= 0;i<G[1].v.size();++i){
        if(d == 0){
            break;
        }
        int to = G[1].v[i];
        if(used[i] == false){
            ans.pb({1,to});
            d--;
        }
    }

    for(int i =1;i<=n;++i){  //recreation of graph
        G[i].v.clear();
    }

    for(int i=0;i<ans.size();++i){
        int x = ans[i].ff;
        int y = ans[i].ss;
        G[x].v.pb(y);
        G[y].v.pb(x);
    }

    ans.clear();

    for(int i=1;i<=n;++i){
        vis[i] = false;
    }

    bfs(1,-1);

    cout << "YES\n";
    for(int i=0;i<ans.size();++i){
        cout << ans[i].ff << " " << ans[i].ss << "\n";
    }

    return 0;
}

    
