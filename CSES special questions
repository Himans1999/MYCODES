Sum of divisors :
https://cses.fi/problemset/task/1082/

from i to r we make a segment.
and in this segment n/i  will repeate number of times .
number = sum(r+1) - sum(i);

ll fun(ll n){
	return mul(n%MOD,mul((n-1)%MOD,((MOD+1)/2)%MOD));
}
 
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
	ll n,ans = 0; cin>>n;
	for(ll i = 1;i<=n;++i){
		ll r = n/(n/i);
		ans = add(ans,mul((n/i)%MOD,(fun(r+1)-fun(i)+MOD)%MOD));
		//ans += (n/i)%MOD*(fun(r+1)-fun(i)+MOD)%MOD;
		i = r;
	}
  	cout << ans;
   return 0;
}



-------------------------------------------------------

https://cses.fi/problemset/task/1717

dp[i] = (i-1)*(dp[i-1] + dp[i-2])
recursive relation .
   int n; cin>>n;
    ll dp[n+1] = {0};
    dp[0] = 1;
    for(int i = 2;i<=n;++i){
    	dp[i] = add(mul(i-1,dp[i-1]),mul(i-1,dp[i-2]));
    }
    cout << dp[n];
    
    ----------------------------------------------------------------------------------
    
    fast fibo.
   
   vl fib(ll n) {            // it returns a vector . v[0] is the nth fibo number.all call this as fib(n+1)
  if (n == 1) return {0, 1, 1, 1,};
  vl x = fib(n / 2);
  x = {((x[0] * x[0]) % MOD + (x[1] * x[2]) % MOD) % MOD,
       ((x[0] * x[1]) % MOD + (x[1] * x[3]) % MOD) % MOD,
       ((x[2] * x[0]) % MOD + (x[3] * x[2]) % MOD) % MOD,
       ((x[2] * x[1]) % MOD + (x[3] * x[3]) % MOD) % MOD};
  if (n % 2)
    x = {x[1], (x[0] + x[1]) % MOD, x[3], (x[2] + x[3]) % MOD};
  return x;
}
-------------------------------------------------------------------------------------------
